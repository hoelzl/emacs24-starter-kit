#+TITLE Local Custimizations for Starter Kit
#+PROPERTY: header-args :results silent

* Set External Programs

#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "aspell")
#+END_SRC

* Window Configuration

#+BEGIN_SRC emacs-lisp
  (when window-system
    (tool-bar-mode -1)
    (setq initial-frame-alist
          '((top . 0) ; (left . 180)
            (width . 100) (height . 54))))
#+END_SRC

* Global Key Bindings

We set up some key bindings that are useful across modes.  Currently
only ~F12~ is bound to ~compile~.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f12>") 'compile)
#+END_SRC

* Customize Ido Mode

#+BEGIN_SRC emacs-lisp
  (setq ido-use-filename-at-point 'guess)
  (setq ido-file-extensions-order
        '(".org"
          "*.jl" "*.lisp" "*.el" "*.rs"
          "*.h" "*.cpp" "*.c" ".el"
          "*.md" "*.rst" ".tex" ".text" ".txt"
          "*.bib" ".log" "*.bbl"))
  (setq ido-use-virtual-buffers t)
#+END_SRC

* Load Some Additional Starter-Kit Files

#+BEGIN_SRC emacs-lisp
  (starter-kit-load "eshell")
  (starter-kit-load "js")
  (starter-kit-load "lisp")
  (starter-kit-load "org")
#+END_SRC

* Julia

Julia works rather well with ESS, but the default writer chokes on
code blocks that don't end with an iterable.  Therefore we override
the command to write objects.  The ~trywritecsv~ function has to be
defined in the =~/.juliarc.js= file, e.g., using the following
definition:

#+BEGIN_SRC julia :tangle no :eval never
function trywritecsv(io, a; opts...)
    try writecsv(io, a; opts...)
    catch open(io, "w") do stream
              write(stream, "")
          end
    end
end;
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (load (expand-file-name "~/Prog/Julia/Emacs/Ess/lisp/ess-site.el"))
  (add-to-list 'load-path
               (expand-file-name "~/Prog/Julia/Emacs/Ob-Julia"))
  (setq inferior-julia-program-name "julia")
  (setq inferior-julia-args "-q --color=no")
  (load (expand-file-name "~/Prog/Julia/Emacs/Ob-Julia/ob-julia.el"))
  (setq org-babel-julia-write-object-command "trywritecsv(\"%s\",%s)")
#+END_SRC

* Rust

#+BEGIN_SRC emacs-lisp
  (starter-kit-install-if-needed 'rust-mode)
  (add-hook 'rust-mode-hook
            (lambda ()
              (set (make-local-variable 'compile-command) "cargo run")))
#+END_SRC

* Clojure

Ensure that ~clojure-mode~ and ~cider~ are present.  Since multiple
versions of cider are present in the repositories it may be necessary
to ensure that the correct version is loaded if you are not using the
latest version of Emacs.  See https://github.com/clojure-emacs/cider
for how this is done.

#+BEGIN_SRC emacs-lisp
  (starter-kit-install-if-needed 'clojure-mode)
  (starter-kit-install-if-needed 'cider)
  (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
  (setq nrepl-hide-special-buffers t)
  (setq cider-repl-history-file (expand-file-name "~/.cider-history"))
  (add-hook 'cider-repl-mode-hook 'paredit-mode)
#+END_SRC

* Lua

Ensure that ~lua-mode~ and ~flymake-lua~ are present.

#+BEGIN_SRC emacs-lisp
  (starter-kit-install-if-needed 'lua-mode)
  (starter-kit-install-if-needed 'flymake-lua)
#+END_SRC

* Markdown

Ensure that ~markdown-mode~ is present.

#+BEGIN_SRC emacs-lisp
  (starter-kit-install-if-needed 'markdown-mode)
#+END_SRC

* Customize Org Mode

This section assumes that the path to =ob-julia.el= has already been
set and allosw Julia to display inline images.

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
  (add-hook 'org-babel-after-execute-hook
            'org-display-inline-images)
  (add-hook 'org-mode-hook
            'org-display-inline-images)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp t) (julia . t)))
#+END_SRC

Enable support for bibliographies.  This requires the environment
variable ~ORG_HOME~ to be set to the root directory of an Org source
checkout.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path
               (format "%s/contrib/lisp" (getenv "ORG_HOME")))
  (require 'ox-bibtex)
#+END_SRC

Support export to ~reveal.js~.  For this to work the environment
variable ~ORG_HOME~ has to point to a directory that contains the Org
source code together with the ~ox-reveal.el~ file from
[[https://github.com/yjwen/org-reveal/]].  One way to obtain this is to
clone my Org-mode fork at [[https://github.com/hoelzl/Org-Mode]] which
already contains this file.

#+BEGIN_SRC emacs-lisp
  (require 'ox-reveal)
  ;; (setq org-reveal-root
  ;;       (concat "file://"
  ;;               (expand-file-name
  ;;               "~/Prog/JavaScript/Libraries/Reveal-Js")))
  ;; This requires reveal to be in the same directory as the sources,
  ;; i.e., css files should be in a css/ directory.
  (setq org-reveal-root "")
#+END_SRC

* Customize AucTeX Mode

#+BEGIN_SRC emacs-lisp
  (require 'reftex)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (add-hook 'latex-mode-hook 'turn-on-reftex)
#+END_SRC

* Support for APEX, the ASCENS Pattern Explorer

We define a project for Apex that generates a web site from org-mode
descriptions of the patterns plus some static content.

#+BEGIN_SRC emacs-lisp
  (defun apex-preamble (args)
    "<nav class=\"navbar navbar-default\">
        <div class=\"container-fluid\">
          <!-- Brand and toggle get grouped for better mobile display -->
          <div class=\"navbar-header\">
            <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\">
              <span class=\"sr-only\">Toggle navigation</span>
              <span class=\"icon-bar\"></span>
              <span class=\"icon-bar\"></span>
              <span class=\"icon-bar\"></span>
            </button>
            <a class=\"navbar-brand\" href=\"#\">APEX</a>
          </div>

          <!-- Collect the nav links, forms, and other content for toggling -->
          <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">
            <form class=\"navbar-form navbar-left\" role=\"search\">
              <div class=\"form-group\">
                <input type=\"text\" class=\"form-control\" placeholder=\"Search\">
              </div>
              <button type=\"submit\" class=\"btn btn-default\">Submit</button>
            </form>
            <ul class=\"nav navbar-nav\">
              <li class=\"dropdown\">
                <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">Patterns <span class=\"caret\"></span></a>
                <ul class=\"dropdown-menu\" role=\"menu\">
                  <li><a href=\"Action-Calculus-Reasoning.html\">Action-Calculus Reasoning</a></li>
                  <li><a href=\"Algorithmic-Planning.html\">Algorithmic Planning</a></li>
                  <li><a href=\"Attribute-Based-Communication.html\">Attribute-based Communication</a></li>
                  <li><a href=\"Awareness-Mechanism.html\">Awareness Mechanism</a></li>
                  <li><a href=\"Blackboard-System.html\">Blackboard System</a></li>
                  <li><a href=\"Cooperation-Mechanism.html\">Cooperation Mechanism</a></li>
                  <li><a href=\"Distributed-Awareness-Based-Behavior.html\">Distributed Awareness-Based Behavior</a></li>
                  <li><a href=\"Data-Driven-Execution.html\">Data-Driven Execution</a></li>
                  <li><a href=\"Dynamic-Code-Update.html\">Dynamic Code Update</a></li>
                  <li><a href=\"Illusion-Of-Stability.html\">Illusion of Stability</a></li>
                  <li><a href=\"Knowledge-Equipped-Component.html\">Knowledge-Equipped-Component</a></li>
                  <li><a href=\"Knowledge-Repository.html\">Knowledge Repository</a></li>
                  <li><a href=\"Reinforcement-Learning.html\">Reinforcement Learning</a></li>
                  <li><a href=\"Shared-Awareness-Mechanism.html\">Shared Awareness Mechanism</a></li>
                  <li><a href=\"Statistical-Model-Checking.html\">Statistical Model Checking</a></li>
                  <li><a href=\"Peer-To-Peer-Learning.html\">Peer-to-Peer Learning</a></li>
                  <li><a href=\"Teacher-Student-Learning.html\">Teacher/Student Learning</a></li>
                  <li><a href=\"Topological-Knowledge-Space.html\">Topological Knowledge Space</a></li>
                  <li><a href=\"Tuple-Space-Based-Coordination.html\">Tuple-Space-Based Coordination</a></li>
                  <li><a href=\"Update-Existing-Knowledge-Source.html\">Update Existing Knowledge Source</a></li>
                  <li class=\"divider\"></li>
                  <li><a href=\"Patterns.html\">All Patterns</a></li>
                </ul>
              </li>
            </ul>
            <ul class=\"nav navbar-nav\">
              <li class=\"dropdown\">
                <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">Categories <span class=\"caret\"></span></a>
                <ul class=\"dropdown-menu\" role=\"menu\">
                  <li><a href=\"#\">Category 1</a></li>
                  <li><a href=\"#\">Category 2</a></li>
                  <li><a href=\"#\">Category 3</a></li>
                  <li class=\"divider\"></li>
                  <li><a href=\"#\">All Categories</a></li>
                </ul>
              </li>
            </ul>
            <ul class=\"nav navbar-nav navbar-right\">
              <li><a href=\"http://www.ascens-ist.eu/\">ASCENS</a></li>
              <li class=\"dropdown\">
                <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">More <span class=\"caret\"></span></a>
                <ul class=\"dropdown-menu\" role=\"menu\">
                  <li><a href=\"#\">About</a></li>
                  <li><a href=\"#\">Contact</a></li>
                  <li><a href=\"#\">Help</a></li>
                  <li class=\"divider\"></li>
                  <li><a href=\"#\">Legal</a></li>
                </ul>
              </li>
            </ul>
          </div><!-- /.navbar-collapse -->
        </div><!-- /.container-fluid -->
      </nav>
      <div class=\"container\">
        <div class=\"row\">
          <div class=\"col-md-12\">")

  (defun apex-encode-pattern (pattern)
    (format "%s" pattern))

  (setq org-link-abbrev-alist
        '(("pattern" . "file:%(apex-encode-pattern).org")))

  (defun apex-postamble (args)
    "     </div>
        </div>
      </div>
      <script src=\"jquery-1.11.2.min.js\"></script>
      <script src=\"bt/js/bootstrap.min.js\"></script>")

  (setq org-publish-project-alist
        `(("apex-patterns"
           :base-directory ,(expand-file-name "~/Uni/Projects/Ascens/Apex/Patterns")
           :publishing-directory ,(expand-file-name "~/Uni/Projects/Ascens/Apex/Export")
           :publishing-function org-html-publish-to-html
           :section-numbers nil
           :html-head "<link href=\"css/fix.css\" rel=\"stylesheet\">"
           :html-head "<link href=\"bt/css/bootstrap.min.css\" rel=\"stylesheet\">"
           :html-doctype "html5"
           :html-html5-fancy t
           :html-head-include-default-style nil
           :html-preamble apex-preamble
           :html-postamble apex-postamble
           :html-mathjax-options ((path "mj/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
                                  (scale "100")
                                  (align "center")
                                  (indent "2em")
                                  (mathml nil))
           :with-toc nil
           :auto-sitemap t
           :sitemap-title "All Patterns"
           :sitemap-filename "Patterns.org"
           :sitemap-sans-extension nil)
          ("apex-html"
           :base-directory ,(expand-file-name "~/Uni/Projects/Ascens/Apex/Patterns")
           :publishing-directory ,(expand-file-name "~/Uni/Projects/Ascens/Apex/Export")
           :publishing-function org-publish-attachment
           :base-extension "html"
           :recursive t)
          ("apex-static"
           :base-directory ,(expand-file-name "~/Uni/Projects/Ascens/Apex/Include")
           :publishing-directory ,(expand-file-name "~/Uni/Projects/Ascens/Apex/Export")
           :publishing-function org-publish-attachment
           :base-extension any
           :recursive t)
          ("apex"
           :components ("apex-static" "apex-html" "apex-patterns"))))
#+END_SRC
